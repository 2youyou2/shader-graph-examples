"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShaderGraph = void 0;
const base_1 = require("./base");
const utils_1 = require("./utils");
const nodes_1 = require("./nodes");
const MasterNode_1 = require("./nodes/master/MasterNode");
class ShaderGraph {
    static decode(contentStr) {
        let content = utils_1.getJsonObject(contentStr);
        if (!content)
            return;
        base_1.resetGlobalShaderSlotID();
        let nodeMap = new Map;
        let properties = content.m_SerializedProperties.map(d => new base_1.ShaderPropery(d));
        let nodes = content.m_SerializableNodes.map(d => {
            let node = nodes_1.createNode(d);
            nodeMap.set(node.uuid, node);
            return node;
        });
        let edges = content.m_SerializableEdges.map(d => new base_1.ShaderEdge(d));
        for (let i = 0; i < edges.length; i++) {
            let edge = edges[i];
            let inputSlot = edge.input;
            let outputSlot = edge.output;
            let inputNode = nodeMap.get(inputSlot.nodeUuid);
            let outputNode = nodeMap.get(outputSlot.nodeUuid);
            if (!inputNode) {
                console.warn(`Can not find input [${inputSlot.nodeUuid}] for edge.`);
                continue;
            }
            if (!outputNode) {
                console.warn(`Can not find input [${outputSlot.nodeUuid}] for edge.`);
                continue;
            }
            inputNode.addDependency(outputNode);
            outputNode.setPriority(inputNode.priority + 1);
            let inputNodeSlot = inputNode.slotsMap.get(inputSlot.id);
            let outputNodeSlot = outputNode.slotsMap.get(outputSlot.id);
            if (inputNodeSlot) {
                inputNodeSlot.connectSlot = outputNodeSlot;
                inputNodeSlot.type = base_1.ShaderSlotType.Input;
            }
            if (outputNodeSlot) {
                outputNodeSlot.connectSlot = inputNodeSlot;
                outputNodeSlot.type = base_1.ShaderSlotType.Output;
            }
        }
        nodes.sort((a, b) => b.priority - a.priority);
        let masterNode = nodes.find(n => n instanceof MasterNode_1.MasterNode);
        if (!masterNode) {
            console.error('Can not find master node.');
            return;
        }
        for (let i = 0; i < nodes.length; i++) {
            let node = nodes[i];
            let code = node.generateCode();
        }
        let code = masterNode.generateCode();
        return code;
    }
}
exports.ShaderGraph = ShaderGraph;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhZGVyZ3JhcGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc2hhZGVyZ3JhcGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQXdHO0FBQ3hHLG1DQUF3QztBQUN4QyxtQ0FBcUM7QUFDckMsMERBQXVEO0FBR3ZELE1BQWEsV0FBVztJQUNwQixNQUFNLENBQUMsTUFBTSxDQUFFLFVBQWtCO1FBQzdCLElBQUksT0FBTyxHQUFHLHFCQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLE9BQU87WUFBRSxPQUFPO1FBRXJCLDhCQUF1QixFQUFFLENBQUM7UUFFMUIsSUFBSSxPQUFPLEdBQTRCLElBQUksR0FBRyxDQUFDO1FBRS9DLElBQUksVUFBVSxHQUFvQixPQUFPLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxvQkFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEcsSUFBSSxLQUFLLEdBQWlCLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDMUQsSUFBSSxJQUFJLEdBQUcsa0JBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDN0IsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLEtBQUssR0FBaUIsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksaUJBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRWpGLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ25DLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQzNCLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7WUFFN0IsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDaEQsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFbEQsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDWixPQUFPLENBQUMsSUFBSSxDQUFDLHVCQUF1QixTQUFTLENBQUMsUUFBUSxhQUFhLENBQUMsQ0FBQTtnQkFDcEUsU0FBUzthQUNaO1lBQ0QsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDYixPQUFPLENBQUMsSUFBSSxDQUFDLHVCQUF1QixVQUFVLENBQUMsUUFBUSxhQUFhLENBQUMsQ0FBQTtnQkFDckUsU0FBUzthQUNaO1lBRUQsU0FBUyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNwQyxVQUFVLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFFL0MsSUFBSSxhQUFhLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3pELElBQUksY0FBYyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUU1RCxJQUFJLGFBQWEsRUFBRTtnQkFDZixhQUFhLENBQUMsV0FBVyxHQUFHLGNBQWMsQ0FBQztnQkFDM0MsYUFBYSxDQUFDLElBQUksR0FBRyxxQkFBYyxDQUFDLEtBQUssQ0FBQzthQUM3QztZQUNELElBQUksY0FBYyxFQUFFO2dCQUNoQixjQUFjLENBQUMsV0FBVyxHQUFHLGFBQWEsQ0FBQztnQkFDM0MsY0FBYyxDQUFDLElBQUksR0FBRyxxQkFBYyxDQUFDLE1BQU0sQ0FBQzthQUMvQztTQUNKO1FBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTlDLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksdUJBQVUsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7WUFDM0MsT0FBTztTQUNWO1FBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbkMsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUNsQztRQUVELElBQUksSUFBSSxHQUFHLFVBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNyQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0NBQ0o7QUFsRUQsa0NBa0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2hhZGVyUHJvcGVyeSwgU2hhZGVyTm9kZSwgU2hhZGVyRWRnZSwgcmVzZXRHbG9iYWxTaGFkZXJTbG90SUQsIFNoYWRlclNsb3RUeXBlIH0gZnJvbSBcIi4vYmFzZVwiO1xyXG5pbXBvcnQgeyBnZXRKc29uT2JqZWN0IH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgY3JlYXRlTm9kZSB9IGZyb20gXCIuL25vZGVzXCI7XHJcbmltcG9ydCB7IE1hc3Rlck5vZGUgfSBmcm9tIFwiLi9ub2Rlcy9tYXN0ZXIvTWFzdGVyTm9kZVwiO1xyXG5pbXBvcnQgZnMgZnJvbSBcImZzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2hhZGVyR3JhcGgge1xyXG4gICAgc3RhdGljIGRlY29kZSAoY29udGVudFN0cjogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBnZXRKc29uT2JqZWN0KGNvbnRlbnRTdHIpO1xyXG4gICAgICAgIGlmICghY29udGVudCkgcmV0dXJuO1xyXG5cclxuICAgICAgICByZXNldEdsb2JhbFNoYWRlclNsb3RJRCgpO1xyXG5cclxuICAgICAgICBsZXQgbm9kZU1hcDogTWFwPHN0cmluZywgU2hhZGVyTm9kZT4gPSBuZXcgTWFwO1xyXG5cclxuICAgICAgICBsZXQgcHJvcGVydGllczogU2hhZGVyUHJvcGVyeVtdID0gY29udGVudC5tX1NlcmlhbGl6ZWRQcm9wZXJ0aWVzLm1hcChkID0+IG5ldyBTaGFkZXJQcm9wZXJ5KGQpKTtcclxuICAgICAgICBsZXQgbm9kZXM6IFNoYWRlck5vZGVbXSA9IGNvbnRlbnQubV9TZXJpYWxpemFibGVOb2Rlcy5tYXAoZCA9PiB7XHJcbiAgICAgICAgICAgIGxldCBub2RlID0gY3JlYXRlTm9kZShkKTtcclxuICAgICAgICAgICAgbm9kZU1hcC5zZXQobm9kZS51dWlkLCBub2RlKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGV0IGVkZ2VzOiBTaGFkZXJFZGdlW10gPSBjb250ZW50Lm1fU2VyaWFsaXphYmxlRWRnZXMubWFwKGQgPT4gbmV3IFNoYWRlckVkZ2UoZCkpXHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWRnZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGVkZ2UgPSBlZGdlc1tpXTtcclxuICAgICAgICAgICAgbGV0IGlucHV0U2xvdCA9IGVkZ2UuaW5wdXQ7XHJcbiAgICAgICAgICAgIGxldCBvdXRwdXRTbG90ID0gZWRnZS5vdXRwdXQ7XHJcblxyXG4gICAgICAgICAgICBsZXQgaW5wdXROb2RlID0gbm9kZU1hcC5nZXQoaW5wdXRTbG90Lm5vZGVVdWlkKTtcclxuICAgICAgICAgICAgbGV0IG91dHB1dE5vZGUgPSBub2RlTWFwLmdldChvdXRwdXRTbG90Lm5vZGVVdWlkKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghaW5wdXROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYENhbiBub3QgZmluZCBpbnB1dCBbJHtpbnB1dFNsb3Qubm9kZVV1aWR9XSBmb3IgZWRnZS5gKVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFvdXRwdXROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYENhbiBub3QgZmluZCBpbnB1dCBbJHtvdXRwdXRTbG90Lm5vZGVVdWlkfV0gZm9yIGVkZ2UuYClcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbnB1dE5vZGUuYWRkRGVwZW5kZW5jeShvdXRwdXROb2RlKTtcclxuICAgICAgICAgICAgb3V0cHV0Tm9kZS5zZXRQcmlvcml0eShpbnB1dE5vZGUucHJpb3JpdHkgKyAxKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBpbnB1dE5vZGVTbG90ID0gaW5wdXROb2RlLnNsb3RzTWFwLmdldChpbnB1dFNsb3QuaWQpO1xyXG4gICAgICAgICAgICBsZXQgb3V0cHV0Tm9kZVNsb3QgPSBvdXRwdXROb2RlLnNsb3RzTWFwLmdldChvdXRwdXRTbG90LmlkKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpbnB1dE5vZGVTbG90KSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dE5vZGVTbG90LmNvbm5lY3RTbG90ID0gb3V0cHV0Tm9kZVNsb3Q7XHJcbiAgICAgICAgICAgICAgICBpbnB1dE5vZGVTbG90LnR5cGUgPSBTaGFkZXJTbG90VHlwZS5JbnB1dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob3V0cHV0Tm9kZVNsb3QpIHtcclxuICAgICAgICAgICAgICAgIG91dHB1dE5vZGVTbG90LmNvbm5lY3RTbG90ID0gaW5wdXROb2RlU2xvdDtcclxuICAgICAgICAgICAgICAgIG91dHB1dE5vZGVTbG90LnR5cGUgPSBTaGFkZXJTbG90VHlwZS5PdXRwdXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG5vZGVzLnNvcnQoKGEsIGIpID0+IGIucHJpb3JpdHkgLSBhLnByaW9yaXR5KTtcclxuXHJcbiAgICAgICAgbGV0IG1hc3Rlck5vZGUgPSBub2Rlcy5maW5kKG4gPT4gbiBpbnN0YW5jZW9mIE1hc3Rlck5vZGUpO1xyXG4gICAgICAgIGlmICghbWFzdGVyTm9kZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdDYW4gbm90IGZpbmQgbWFzdGVyIG5vZGUuJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IG5vZGUgPSBub2Rlc1tpXTtcclxuICAgICAgICAgICAgbGV0IGNvZGUgPSBub2RlLmdlbmVyYXRlQ29kZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGNvZGUgPSBtYXN0ZXJOb2RlLmdlbmVyYXRlQ29kZSgpO1xyXG4gICAgICAgIHJldHVybiBjb2RlO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==