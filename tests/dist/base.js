"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShaderEdge = exports.ShaderEdgeSlot = exports.ShaderSlot = exports.ShaderSlotType = exports.resetGlobalShaderSlotID = exports.ShaderNode = exports.ShaderPropery = void 0;
const utils_1 = require("./utils");
const type_1 = require("./type");
class ShaderPropery {
    constructor(obj) {
        this.type = {};
        this.data = {};
        this.name = '';
        this.node = null;
        this.type = obj.type;
        this.data = utils_1.getJsonObject(obj.JSONnodeData);
        this.name = this.data.m_Name;
        this.name = this.name.replace(/ /g, '_');
    }
    get defaultValue() {
        return this.data.m_Value;
    }
    get concretePrecision() {
        let concretePrecision = 1;
        let value = this.defaultValue;
        if (typeof value === 'object') {
            if (value.w !== undefined || value.r !== undefined) {
                concretePrecision = 4;
            }
            else if (value.z !== undefined || value.g !== undefined) {
                concretePrecision = 3;
            }
            else if (value.y !== undefined || value.b !== undefined) {
                concretePrecision = 2;
            }
        }
        return concretePrecision;
    }
}
exports.ShaderPropery = ShaderPropery;
class ShaderNode {
    // subgraphNode: SubGraphNode | null = null;
    constructor(data) {
        this.type = {};
        this.data = {};
        this.priority = 0;
        this.uuid = '';
        this.slots = [];
        this.slotsMap = new Map;
        this.deps = [];
        this.depChunks = [];
        this.isMasterNode = false;
        this.concretePrecisionType = type_1.ConcretePrecisionType.Min;
        this.type = data.typeInfo;
        this.data = utils_1.getJsonObject(data.JSONnodeData);
        this.uuid = this.data.m_GuidSerialized;
        this.slots = this.data.m_SerializableSlots.map(d => {
            let slot = new ShaderSlot(d, this);
            this.slotsMap.set(slot.id, slot);
            return slot;
        });
    }
    addDependency(dep) {
        if (dep === this) {
            return;
        }
        if (!this.deps.includes(dep)) {
            this.deps.push(dep);
        }
    }
    calcConcretePrecision() {
        if (this.concretePrecisionType !== type_1.ConcretePrecisionType.Fixed) {
            let finalPrecision = 1;
            if (this.concretePrecisionType === type_1.ConcretePrecisionType.Min) {
                finalPrecision = 999;
                this.inputSlots.forEach(slot => {
                    let concretePrecision = slot.concretePrecision;
                    if (slot.connectSlot) {
                        concretePrecision = slot.connectSlot.concretePrecision;
                    }
                    finalPrecision = Math.min(finalPrecision, concretePrecision);
                });
            }
            else if (this.concretePrecisionType === type_1.ConcretePrecisionType.Max) {
                finalPrecision = -999;
                this.inputSlots.forEach(slot => {
                    let concretePrecision = slot.concretePrecision;
                    if (slot.connectSlot) {
                        concretePrecision = slot.connectSlot.concretePrecision;
                    }
                    finalPrecision = Math.max(finalPrecision, concretePrecision);
                });
            }
            else if (this.concretePrecisionType === type_1.ConcretePrecisionType.Texture) {
                finalPrecision = type_1.TextureConcretePrecision;
            }
            else {
                console.error('Not supported ConcretePrecisionType : ' + this.concretePrecisionType);
            }
            this.slots.forEach(slot => {
                slot._concretePrecision = finalPrecision;
            });
        }
    }
    setPriority(priority) {
        this.priority = Math.max(priority, this.priority);
        for (let i = 0; i < this.deps.length; i++) {
            this.deps[i].setPriority(this.priority + 1);
        }
    }
    get outputSlots() {
        return this.slots.filter(s => s.type === ShaderSlotType.Output);
    }
    get inputSlots() {
        return this.slots.filter(s => s.type === ShaderSlotType.Input);
    }
    getSlotWithSlotName(name) {
        return this.slots.find(s => s.displayName === name);
    }
    getOutputSlotWithSlotName(name) {
        return this.outputSlots.find(s => s.displayName === name);
    }
    getOutputVarName(idx) {
        return this.outputSlots[idx].varName;
    }
    getOutputVarDefine(idx) {
        return this.outputSlots[idx].varDefine;
    }
    getInputValue(idx) {
        return this.inputSlots[idx].slotValue;
    }
    generateCode() {
        return '';
    }
}
exports.ShaderNode = ShaderNode;
let _GlobalShaderSlotID_ = 0;
function resetGlobalShaderSlotID() {
    _GlobalShaderSlotID_ = 0;
}
exports.resetGlobalShaderSlotID = resetGlobalShaderSlotID;
var ShaderSlotType;
(function (ShaderSlotType) {
    ShaderSlotType[ShaderSlotType["Input"] = 0] = "Input";
    ShaderSlotType[ShaderSlotType["Output"] = 1] = "Output";
})(ShaderSlotType = exports.ShaderSlotType || (exports.ShaderSlotType = {}));
class ShaderSlot {
    constructor(obj, node) {
        this.typeInfo = {};
        this.data = {};
        this.id = 0;
        this.globalID = 0;
        this.displayName = '';
        this.connectSlots = [];
        this.node = undefined;
        this.type = ShaderSlotType.Input;
        this._concretePrecision = -1;
        this.typeInfo = obj.typeInfo;
        this.data = utils_1.getJsonObject(obj.JSONnodeData);
        this.type = this.data.m_SlotType;
        this.node = node;
        this.id = this.data.m_Id;
        this.globalID = _GlobalShaderSlotID_++;
        this.displayName = this.data.m_DisplayName;
    }
    get connectSlot() {
        return this.connectSlots[0];
    }
    ;
    set connectSlot(v) {
        this.connectSlots.length = 0;
        if (v) {
            this.connectSlots[0] = v;
        }
    }
    get varName() {
        return 'var_' + this.globalID;
    }
    get varDefine() {
        let precision = '';
        if (this.concretePrecision === 1) {
            precision = 'float';
        }
        else if (this.concretePrecision === 2) {
            precision = 'vec2';
        }
        else if (this.concretePrecision === 3) {
            precision = 'vec3';
        }
        else if (this.concretePrecision === 4) {
            precision = 'vec4';
        }
        else if (this.concretePrecision === type_1.TextureConcretePrecision) {
            precision = 'sampler2D';
        }
        if (precision) {
            precision += ' ';
        }
        return precision + this.varName;
    }
    get defaultValue() {
        let defaultValue = this.data.m_Value;
        let x = utils_1.getFloatString(defaultValue.x);
        let y = utils_1.getFloatString(defaultValue.y);
        let z = utils_1.getFloatString(defaultValue.z);
        let w = utils_1.getFloatString(defaultValue.w);
        let result = utils_1.getFloatString(defaultValue);
        if (typeof defaultValue === 'object') {
            if (defaultValue.w !== undefined) {
                result = `vec4(${x}, ${y}, ${z}, ${w})`;
            }
            else if (defaultValue.z !== undefined) {
                result = `vec3(${x}, ${y}, ${z})`;
            }
            else if (defaultValue.y !== undefined) {
                result = `vec2(${x}, ${y})`;
            }
        }
        return result;
    }
    get slotValue() {
        var _a;
        let valueConretePresition = this.defaultConcretePrecision;
        let selfConcretePresition = this.concretePrecision;
        let defaultValue = this.data.m_Value;
        let x = utils_1.getValueElementStr(defaultValue, 0);
        let y = utils_1.getValueElementStr(defaultValue, 1);
        let z = utils_1.getValueElementStr(defaultValue, 2);
        let w = utils_1.getValueElementStr(defaultValue, 3);
        if (typeof defaultValue !== 'object') {
            x = utils_1.getFloatString(defaultValue);
        }
        let result = '{{value}}';
        if (selfConcretePresition === 2) {
            result = `vec2({{value}})`;
        }
        else if (selfConcretePresition === 3) {
            result = `vec3({{value}})`;
        }
        else if (selfConcretePresition === 4) {
            result = `vec4({{value}})`;
        }
        let value = '';
        if (!this.connectSlot) {
            if ((_a = this.node) === null || _a === void 0 ? void 0 : _a.isMasterNode) {
                return null;
            }
            valueConretePresition = utils_1.getValueConcretePrecision(defaultValue);
            let values = [x, y, z, w];
            let concreteValues = [];
            for (let i = 0; i < selfConcretePresition; i++) {
                concreteValues.push(values[i] === undefined ? 0 : values[i]);
            }
            value = concreteValues.join(', ');
        }
        else {
            valueConretePresition = this.connectSlot.concretePrecision;
            value = this.connectSlot.varName;
            if (selfConcretePresition !== valueConretePresition) {
                if (selfConcretePresition < valueConretePresition) {
                    if (selfConcretePresition === 1) {
                        value += '.x';
                    }
                    else if (selfConcretePresition === 2) {
                        value += '.xy';
                    }
                    else if (selfConcretePresition === 3) {
                        value += '.xyz';
                    }
                }
                else {
                    if (valueConretePresition !== 1) {
                        let dif = selfConcretePresition - valueConretePresition;
                        let difValues = [];
                        for (let i = 0; i < dif; i++) {
                            difValues.push('0.');
                        }
                        value += ', ' + difValues.join(', ');
                    }
                    // if (dif === 1) {
                    //     value += `, ${x}`;
                    // }
                    // else if (dif === 2) {
                    //     value += `, ${x}, ${y}`;
                    // }
                    // else if (dif === 3) {
                    //     value += `, ${x}, ${y}, ${z}`;
                    // }
                }
            }
        }
        result = result.replace('{{value}}', value);
        return result;
    }
    get defaultConcretePrecision() {
        let concretePrecision = 1;
        let value = this.data.m_Value;
        if (typeof value === 'object') {
            if (value.w !== undefined) {
                concretePrecision = 4;
            }
            else if (value.z !== undefined) {
                concretePrecision = 3;
            }
            else if (value.y !== undefined) {
                concretePrecision = 2;
            }
        }
        return concretePrecision;
    }
    get concretePrecision() {
        if (this._concretePrecision === -1) {
            this._concretePrecision = 1;
            let value = this.data.m_Value;
            if (typeof value === 'object') {
                if (value.w !== undefined) {
                    this._concretePrecision = 4;
                }
                else if (value.z !== undefined) {
                    this._concretePrecision = 3;
                }
                else if (value.y !== undefined) {
                    this._concretePrecision = 2;
                }
            }
        }
        return this._concretePrecision;
    }
}
exports.ShaderSlot = ShaderSlot;
class ShaderEdgeSlot {
    constructor() {
        this.id = 0;
        this.nodeUuid = '';
    }
    set(data) {
        this.id = data.m_SlotId;
        this.nodeUuid = data.m_NodeGUIDSerialized;
    }
}
exports.ShaderEdgeSlot = ShaderEdgeSlot;
class ShaderEdge {
    constructor(data) {
        this.type = {};
        this.data = {};
        this.input = new ShaderEdgeSlot;
        this.output = new ShaderEdgeSlot;
        this.type = data.typeInfo;
        this.data = utils_1.getJsonObject(data.JSONnodeData);
        this.input.set(this.data.m_InputSlot);
        this.output.set(this.data.m_OutputSlot);
    }
}
exports.ShaderEdge = ShaderEdge;
//# sourceMappingURL=data:application/json;base64,