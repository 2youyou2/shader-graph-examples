"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrecisionName = exports.getValueConcretePrecision = exports.getValueElementStr = exports.getValueElement = exports.getFloatString = exports.getJsonObject = void 0;
const type_1 = require("./type");
function getJsonObject(str) {
    let content;
    try {
        content = JSON.parse(str);
    }
    catch (err) {
        console.error(err);
    }
    return content;
}
exports.getJsonObject = getJsonObject;
function getFloatString(value) {
    if (typeof value !== 'number') {
        return value;
    }
    let str = value + '';
    if (!str.includes('.')) {
        str += '.';
    }
    return str;
}
exports.getFloatString = getFloatString;
let ValueElements = {
    vector: ['x', 'y', 'z', 'w'],
    color: ['r', 'g', 'b', 'a'],
    mat4: ['e00', 'e01', 'e02', 'e03']
};
function getValueElement(value, index) {
    if (typeof value === 'number') {
        return value;
    }
    let elements;
    if (value.x !== undefined) {
        elements = ValueElements.vector;
    }
    else if (value.r !== undefined) {
        elements = ValueElements.color;
    }
    else if (value.e00 !== undefined) {
        elements = ValueElements.mat4;
    }
    return value[elements[index]] || 0;
}
exports.getValueElement = getValueElement;
function getValueElementStr(value, index) {
    return getFloatString(getValueElement(value, index));
}
exports.getValueElementStr = getValueElementStr;
function getValueConcretePrecision(value) {
    let valueConretePresition = 1;
    if (typeof value === 'object') {
        if (value.w !== undefined || value.a !== undefined) {
            valueConretePresition = 4;
        }
        else if (value.z !== undefined || value.b !== undefined) {
            valueConretePresition = 3;
        }
        else if (value.y !== undefined || value.g !== undefined) {
            valueConretePresition = 2;
        }
        else if (value.m_SerializedTexture !== undefined) {
            valueConretePresition = type_1.TextureConcretePrecision.Texture2D;
        }
    }
    return valueConretePresition;
}
exports.getValueConcretePrecision = getValueConcretePrecision;
function getPrecisionName(precision) {
    let name = '';
    if (precision === 1) {
        name = 'float';
    }
    else if (precision === 2) {
        name = 'vec2';
    }
    else if (precision === 3) {
        name = 'vec3';
    }
    else if (precision === 4) {
        name = 'vec4';
    }
    else if (precision === type_1.TextureConcretePrecision.Texture2D) {
        name = 'sampler2D';
    }
    return name;
}
exports.getPrecisionName = getPrecisionName;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQWtEO0FBRWxELFNBQWdCLGFBQWEsQ0FBRSxHQUFXO0lBQ3RDLElBQUksT0FBTyxDQUFDO0lBQ1osSUFBSTtRQUNBLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzdCO0lBQ0QsT0FBTyxHQUFHLEVBQUU7UUFDUixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3RCO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQVRELHNDQVNDO0FBRUQsU0FBZ0IsY0FBYyxDQUFFLEtBQWE7SUFDekMsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDM0IsT0FBTyxLQUFLLENBQUM7S0FDaEI7SUFFRCxJQUFJLEdBQUcsR0FBRyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3BCLEdBQUcsSUFBSSxHQUFHLENBQUM7S0FDZDtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQztBQVZELHdDQVVDO0FBRUQsSUFBSSxhQUFhLEdBQUc7SUFDaEIsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO0lBQzVCLEtBQUssRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUMzQixJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7Q0FDckMsQ0FBQTtBQUVELFNBQWdCLGVBQWUsQ0FBRSxLQUFzQixFQUFFLEtBQWE7SUFDbEUsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDM0IsT0FBTyxLQUFLLENBQUM7S0FDaEI7SUFFRCxJQUFJLFFBQVEsQ0FBQztJQUViLElBQUksS0FBSyxDQUFDLENBQUMsS0FBSyxTQUFTLEVBQUU7UUFDdkIsUUFBUSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUM7S0FDbkM7U0FDSSxJQUFJLEtBQUssQ0FBQyxDQUFDLEtBQUssU0FBUyxFQUFFO1FBQzVCLFFBQVEsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDO0tBQ2xDO1NBQ0ksSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLFNBQVMsRUFBRTtRQUM5QixRQUFRLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQztLQUNqQztJQUVELE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBbEJELDBDQWtCQztBQUVELFNBQWdCLGtCQUFrQixDQUFDLEtBQXNCLEVBQUUsS0FBYTtJQUNwRSxPQUFPLGNBQWMsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDekQsQ0FBQztBQUZELGdEQUVDO0FBRUQsU0FBZ0IseUJBQXlCLENBQUUsS0FBSztJQUM1QyxJQUFJLHFCQUFxQixHQUFHLENBQUMsQ0FBQztJQUM5QixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUMzQixJQUFJLEtBQUssQ0FBQyxDQUFDLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQ2hELHFCQUFxQixHQUFHLENBQUMsQ0FBQztTQUM3QjthQUNJLElBQUksS0FBSyxDQUFDLENBQUMsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFDckQscUJBQXFCLEdBQUcsQ0FBQyxDQUFDO1NBQzdCO2FBQ0ksSUFBSSxLQUFLLENBQUMsQ0FBQyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUNyRCxxQkFBcUIsR0FBRyxDQUFDLENBQUM7U0FDN0I7YUFDSSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsS0FBSyxTQUFTLEVBQUU7WUFDOUMscUJBQXFCLEdBQUcsK0JBQXdCLENBQUMsU0FBUyxDQUFDO1NBQzlEO0tBQ0o7SUFDRCxPQUFPLHFCQUFxQixDQUFDO0FBQ2pDLENBQUM7QUFqQkQsOERBaUJDO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQUUsU0FBaUI7SUFDL0MsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ2QsSUFBSSxTQUFTLEtBQUssQ0FBQyxFQUFFO1FBQ2pCLElBQUksR0FBRyxPQUFPLENBQUM7S0FDbEI7U0FDSSxJQUFJLFNBQVMsS0FBSyxDQUFDLEVBQUU7UUFDdEIsSUFBSSxHQUFHLE1BQU0sQ0FBQztLQUNqQjtTQUNJLElBQUksU0FBUyxLQUFLLENBQUMsRUFBRTtRQUN0QixJQUFJLEdBQUcsTUFBTSxDQUFDO0tBQ2pCO1NBQ0ksSUFBSSxTQUFTLEtBQUssQ0FBQyxFQUFFO1FBQ3RCLElBQUksR0FBRyxNQUFNLENBQUM7S0FDakI7U0FDSSxJQUFJLFNBQVMsS0FBSywrQkFBd0IsQ0FBQyxTQUFTLEVBQUU7UUFDdkQsSUFBSSxHQUFHLFdBQVcsQ0FBQztLQUN0QjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUM7QUFsQkQsNENBa0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGV4dHVyZUNvbmNyZXRlUHJlY2lzaW9uIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEpzb25PYmplY3QgKHN0cjogc3RyaW5nKSB7XHJcbiAgICBsZXQgY29udGVudDtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29udGVudCA9IEpTT04ucGFyc2Uoc3RyKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29udGVudDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZsb2F0U3RyaW5nICh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgc3RyID0gdmFsdWUgKyAnJztcclxuICAgIGlmICghc3RyLmluY2x1ZGVzKCcuJykpIHtcclxuICAgICAgICBzdHIgKz0gJy4nO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0cjtcclxufVxyXG5cclxubGV0IFZhbHVlRWxlbWVudHMgPSB7XHJcbiAgICB2ZWN0b3I6IFsneCcsICd5JywgJ3onLCAndyddLFxyXG4gICAgY29sb3I6IFsncicsICdnJywgJ2InLCAnYSddLFxyXG4gICAgbWF0NDogWydlMDAnLCAnZTAxJywgJ2UwMicsICdlMDMnXVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWVFbGVtZW50ICh2YWx1ZTogb2JqZWN0IHwgbnVtYmVyLCBpbmRleDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBlbGVtZW50cztcclxuXHJcbiAgICBpZiAodmFsdWUueCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZWxlbWVudHMgPSBWYWx1ZUVsZW1lbnRzLnZlY3RvcjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHZhbHVlLnIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGVsZW1lbnRzID0gVmFsdWVFbGVtZW50cy5jb2xvcjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHZhbHVlLmUwMCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZWxlbWVudHMgPSBWYWx1ZUVsZW1lbnRzLm1hdDQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZhbHVlW2VsZW1lbnRzW2luZGV4XV0gfHwgMDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlRWxlbWVudFN0cih2YWx1ZTogb2JqZWN0IHwgbnVtYmVyLCBpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBnZXRGbG9hdFN0cmluZyhnZXRWYWx1ZUVsZW1lbnQodmFsdWUsIGluZGV4KSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRWYWx1ZUNvbmNyZXRlUHJlY2lzaW9uICh2YWx1ZSkge1xyXG4gICAgbGV0IHZhbHVlQ29ucmV0ZVByZXNpdGlvbiA9IDE7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGlmICh2YWx1ZS53ICE9PSB1bmRlZmluZWQgfHwgdmFsdWUuYSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHZhbHVlQ29ucmV0ZVByZXNpdGlvbiA9IDQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlLnogIT09IHVuZGVmaW5lZCB8fCB2YWx1ZS5iICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdmFsdWVDb25yZXRlUHJlc2l0aW9uID0gMztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodmFsdWUueSAhPT0gdW5kZWZpbmVkIHx8IHZhbHVlLmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB2YWx1ZUNvbnJldGVQcmVzaXRpb24gPSAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWx1ZS5tX1NlcmlhbGl6ZWRUZXh0dXJlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdmFsdWVDb25yZXRlUHJlc2l0aW9uID0gVGV4dHVyZUNvbmNyZXRlUHJlY2lzaW9uLlRleHR1cmUyRDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWVDb25yZXRlUHJlc2l0aW9uO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJlY2lzaW9uTmFtZSAocHJlY2lzaW9uOiBudW1iZXIpIHtcclxuICAgIGxldCBuYW1lID0gJyc7XHJcbiAgICBpZiAocHJlY2lzaW9uID09PSAxKSB7XHJcbiAgICAgICAgbmFtZSA9ICdmbG9hdCc7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChwcmVjaXNpb24gPT09IDIpIHtcclxuICAgICAgICBuYW1lID0gJ3ZlYzInO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocHJlY2lzaW9uID09PSAzKSB7XHJcbiAgICAgICAgbmFtZSA9ICd2ZWMzJztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHByZWNpc2lvbiA9PT0gNCkge1xyXG4gICAgICAgIG5hbWUgPSAndmVjNCc7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChwcmVjaXNpb24gPT09IFRleHR1cmVDb25jcmV0ZVByZWNpc2lvbi5UZXh0dXJlMkQpIHtcclxuICAgICAgICBuYW1lID0gJ3NhbXBsZXIyRCc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmFtZTtcclxufVxyXG4iXX0=