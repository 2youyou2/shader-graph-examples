"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrecisionName = exports.getValueConcretePrecision = exports.getValueElementStr = exports.getValueElement = exports.getFloatString = exports.getJsonObject = void 0;
const type_1 = require("./type");
function getJsonObject(str) {
    let content;
    try {
        content = JSON.parse(str);
    }
    catch (err) {
        console.error(err);
    }
    return content;
}
exports.getJsonObject = getJsonObject;
function getFloatString(value) {
    if (typeof value !== 'number') {
        return value;
    }
    let str = value + '';
    if (!str.includes('.')) {
        str += '.';
    }
    return str;
}
exports.getFloatString = getFloatString;
let ValueElements = {
    vector: ['x', 'y', 'z', 'w'],
    color: ['r', 'g', 'b', 'a'],
    mat4: ['e00', 'e01', 'e02', 'e03']
};
function getValueElement(value, index) {
    if (typeof value === 'number') {
        return value;
    }
    let elements;
    if (value.x !== undefined) {
        elements = ValueElements.vector;
    }
    else if (value.r !== undefined) {
        elements = ValueElements.color;
    }
    else if (value.e00 !== undefined) {
        elements = ValueElements.mat4;
    }
    return value[elements[index]] || 0;
}
exports.getValueElement = getValueElement;
function getValueElementStr(value, index) {
    return getFloatString(getValueElement(value, index));
}
exports.getValueElementStr = getValueElementStr;
function getValueConcretePrecision(value) {
    let valueConretePresition = 1;
    if (typeof value === 'object') {
        if (value.w !== undefined || value.a !== undefined) {
            valueConretePresition = 4;
        }
        else if (value.z !== undefined || value.b !== undefined) {
            valueConretePresition = 3;
        }
        else if (value.y !== undefined || value.g !== undefined) {
            valueConretePresition = 2;
        }
        else if (value.m_SerializedTexture) {
            valueConretePresition = type_1.TextureConcretePrecision.Texture2D;
        }
    }
    return valueConretePresition;
}
exports.getValueConcretePrecision = getValueConcretePrecision;
function getPrecisionName(precision) {
    let name = '';
    if (precision === 1) {
        name = 'float';
    }
    else if (precision === 2) {
        name = 'vec2';
    }
    else if (precision === 3) {
        name = 'vec3';
    }
    else if (precision === 4) {
        name = 'vec4';
    }
    else if (precision === type_1.TextureConcretePrecision.Texture2D) {
        name = 'sampler2D';
    }
    return name;
}
exports.getPrecisionName = getPrecisionName;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQWtEO0FBRWxELFNBQWdCLGFBQWEsQ0FBRSxHQUFXO0lBQ3RDLElBQUksT0FBTyxDQUFDO0lBQ1osSUFBSTtRQUNBLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzdCO0lBQ0QsT0FBTyxHQUFHLEVBQUU7UUFDUixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3RCO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQVRELHNDQVNDO0FBRUQsU0FBZ0IsY0FBYyxDQUFFLEtBQWE7SUFDekMsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDM0IsT0FBTyxLQUFLLENBQUM7S0FDaEI7SUFFRCxJQUFJLEdBQUcsR0FBRyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3BCLEdBQUcsSUFBSSxHQUFHLENBQUM7S0FDZDtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQztBQVZELHdDQVVDO0FBRUQsSUFBSSxhQUFhLEdBQUc7SUFDaEIsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO0lBQzVCLEtBQUssRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUMzQixJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7Q0FDckMsQ0FBQTtBQUVELFNBQWdCLGVBQWUsQ0FBRSxLQUFzQixFQUFFLEtBQWE7SUFDbEUsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDM0IsT0FBTyxLQUFLLENBQUM7S0FDaEI7SUFFRCxJQUFJLFFBQVEsQ0FBQztJQUViLElBQUksS0FBSyxDQUFDLENBQUMsS0FBSyxTQUFTLEVBQUU7UUFDdkIsUUFBUSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUM7S0FDbkM7U0FDSSxJQUFJLEtBQUssQ0FBQyxDQUFDLEtBQUssU0FBUyxFQUFFO1FBQzVCLFFBQVEsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDO0tBQ2xDO1NBQ0ksSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLFNBQVMsRUFBRTtRQUM5QixRQUFRLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQztLQUNqQztJQUVELE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBbEJELDBDQWtCQztBQUVELFNBQWdCLGtCQUFrQixDQUFDLEtBQXNCLEVBQUUsS0FBYTtJQUNwRSxPQUFPLGNBQWMsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDekQsQ0FBQztBQUZELGdEQUVDO0FBRUQsU0FBZ0IseUJBQXlCLENBQUUsS0FBSztJQUM1QyxJQUFJLHFCQUFxQixHQUFHLENBQUMsQ0FBQztJQUM5QixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUMzQixJQUFJLEtBQUssQ0FBQyxDQUFDLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQ2hELHFCQUFxQixHQUFHLENBQUMsQ0FBQztTQUM3QjthQUNJLElBQUksS0FBSyxDQUFDLENBQUMsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFDckQscUJBQXFCLEdBQUcsQ0FBQyxDQUFDO1NBQzdCO2FBQ0ksSUFBSSxLQUFLLENBQUMsQ0FBQyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUNyRCxxQkFBcUIsR0FBRyxDQUFDLENBQUM7U0FDN0I7YUFDSSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtZQUNoQyxxQkFBcUIsR0FBRywrQkFBd0IsQ0FBQyxTQUFTLENBQUM7U0FDOUQ7S0FDSjtJQUNELE9BQU8scUJBQXFCLENBQUM7QUFDakMsQ0FBQztBQWpCRCw4REFpQkM7QUFFRCxTQUFnQixnQkFBZ0IsQ0FBRSxTQUFpQjtJQUMvQyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7SUFDZCxJQUFJLFNBQVMsS0FBSyxDQUFDLEVBQUU7UUFDakIsSUFBSSxHQUFHLE9BQU8sQ0FBQztLQUNsQjtTQUNJLElBQUksU0FBUyxLQUFLLENBQUMsRUFBRTtRQUN0QixJQUFJLEdBQUcsTUFBTSxDQUFDO0tBQ2pCO1NBQ0ksSUFBSSxTQUFTLEtBQUssQ0FBQyxFQUFFO1FBQ3RCLElBQUksR0FBRyxNQUFNLENBQUM7S0FDakI7U0FDSSxJQUFJLFNBQVMsS0FBSyxDQUFDLEVBQUU7UUFDdEIsSUFBSSxHQUFHLE1BQU0sQ0FBQztLQUNqQjtTQUNJLElBQUksU0FBUyxLQUFLLCtCQUF3QixDQUFDLFNBQVMsRUFBRTtRQUN2RCxJQUFJLEdBQUcsV0FBVyxDQUFDO0tBQ3RCO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQWxCRCw0Q0FrQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXh0dXJlQ29uY3JldGVQcmVjaXNpb24gfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0SnNvbk9iamVjdCAoc3RyOiBzdHJpbmcpIHtcclxuICAgIGxldCBjb250ZW50O1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb250ZW50ID0gSlNPTi5wYXJzZShzdHIpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb250ZW50O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmxvYXRTdHJpbmcgKHZhbHVlOiBudW1iZXIpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBzdHIgPSB2YWx1ZSArICcnO1xyXG4gICAgaWYgKCFzdHIuaW5jbHVkZXMoJy4nKSkge1xyXG4gICAgICAgIHN0ciArPSAnLic7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RyO1xyXG59XHJcblxyXG5sZXQgVmFsdWVFbGVtZW50cyA9IHtcclxuICAgIHZlY3RvcjogWyd4JywgJ3knLCAneicsICd3J10sXHJcbiAgICBjb2xvcjogWydyJywgJ2cnLCAnYicsICdhJ10sXHJcbiAgICBtYXQ0OiBbJ2UwMCcsICdlMDEnLCAnZTAyJywgJ2UwMyddXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRWYWx1ZUVsZW1lbnQgKHZhbHVlOiBvYmplY3QgfCBudW1iZXIsIGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGVsZW1lbnRzO1xyXG5cclxuICAgIGlmICh2YWx1ZS54ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBlbGVtZW50cyA9IFZhbHVlRWxlbWVudHMudmVjdG9yO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodmFsdWUuciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZWxlbWVudHMgPSBWYWx1ZUVsZW1lbnRzLmNvbG9yO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodmFsdWUuZTAwICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBlbGVtZW50cyA9IFZhbHVlRWxlbWVudHMubWF0NDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdmFsdWVbZWxlbWVudHNbaW5kZXhdXSB8fCAwO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWVFbGVtZW50U3RyKHZhbHVlOiBvYmplY3QgfCBudW1iZXIsIGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGdldEZsb2F0U3RyaW5nKGdldFZhbHVlRWxlbWVudCh2YWx1ZSwgaW5kZXgpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlQ29uY3JldGVQcmVjaXNpb24gKHZhbHVlKSB7XHJcbiAgICBsZXQgdmFsdWVDb25yZXRlUHJlc2l0aW9uID0gMTtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlLncgIT09IHVuZGVmaW5lZCB8fCB2YWx1ZS5hICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdmFsdWVDb25yZXRlUHJlc2l0aW9uID0gNDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodmFsdWUueiAhPT0gdW5kZWZpbmVkIHx8IHZhbHVlLmIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB2YWx1ZUNvbnJldGVQcmVzaXRpb24gPSAzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWx1ZS55ICE9PSB1bmRlZmluZWQgfHwgdmFsdWUuZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHZhbHVlQ29ucmV0ZVByZXNpdGlvbiA9IDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlLm1fU2VyaWFsaXplZFRleHR1cmUpIHtcclxuICAgICAgICAgICAgdmFsdWVDb25yZXRlUHJlc2l0aW9uID0gVGV4dHVyZUNvbmNyZXRlUHJlY2lzaW9uLlRleHR1cmUyRDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWVDb25yZXRlUHJlc2l0aW9uO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJlY2lzaW9uTmFtZSAocHJlY2lzaW9uOiBudW1iZXIpIHtcclxuICAgIGxldCBuYW1lID0gJyc7XHJcbiAgICBpZiAocHJlY2lzaW9uID09PSAxKSB7XHJcbiAgICAgICAgbmFtZSA9ICdmbG9hdCc7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChwcmVjaXNpb24gPT09IDIpIHtcclxuICAgICAgICBuYW1lID0gJ3ZlYzInO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocHJlY2lzaW9uID09PSAzKSB7XHJcbiAgICAgICAgbmFtZSA9ICd2ZWMzJztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHByZWNpc2lvbiA9PT0gNCkge1xyXG4gICAgICAgIG5hbWUgPSAndmVjNCc7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChwcmVjaXNpb24gPT09IFRleHR1cmVDb25jcmV0ZVByZWNpc2lvbi5UZXh0dXJlMkQpIHtcclxuICAgICAgICBuYW1lID0gJ3NhbXBsZXIyRCc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmFtZTtcclxufVxyXG4iXX0=