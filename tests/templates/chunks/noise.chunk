CCProgram shader_graph_noise %{

float noise_randomValue (vec2 uv)
{
    return fract(sin(dot(uv, vec2(12.9898, 78.233)))*43758.5453);
}

float noise_interpolate (float a, float b, float t)
{
    return (1.0-t)*a + (t*b);
}

float simpleNoise_valueNoise (vec2 uv)
{
    vec2 i = floor(uv);
    vec2 f = fract(uv);
    f = f * f * (3.0 - 2.0 * f);

    uv = abs(fract(uv) - 0.5);
    vec2 c0 = i + vec2(0.0, 0.0);
    vec2 c1 = i + vec2(1.0, 0.0);
    vec2 c2 = i + vec2(0.0, 1.0);
    vec2 c3 = i + vec2(1.0, 1.0);
    float r0 = noise_randomValue(c0);
    float r1 = noise_randomValue(c1);
    float r2 = noise_randomValue(c2);
    float r3 = noise_randomValue(c3);

    float bottomOfGrid = noise_interpolate(r0, r1, f.x);
    float topOfGrid = noise_interpolate(r2, r3, f.x);
    float t = noise_interpolate(bottomOfGrid, topOfGrid, f.y);
    return t;
}

float simpleNoise (vec2 uv, float scale) {
    float t = 0.0;

    float freq = pow(2.0, 0.);
    float amp = pow(0.5, 3.);
    t += simpleNoise_valueNoise(vec2(uv.x*scale/freq, uv.y*scale/freq))*amp;

    freq = pow(2.0, 1.);
    amp = pow(0.5, 3.-1.);
    t += simpleNoise_valueNoise(vec2(uv.x*scale/freq, uv.y*scale/freq))*amp;

    freq = pow(2.0, 2.);
    amp = pow(0.5, 3.-2.);
    t += simpleNoise_valueNoise(vec2(uv.x*scale/freq, uv.y*scale/freq))*amp;

    return t;
}

}%
