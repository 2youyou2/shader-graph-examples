// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      
        

  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      
  - name: add
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: &r1 { cullMode: none }
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendSrcAlpha: src_alpha
          blendDstAlpha: one
      
  - name: alpha-blend
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: *r1
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      
}%




CCProgram shader_graph_common %{

#define saturate(Value) clamp(Value, 0., 1.)
#define frac(uv) fract(uv)

}%



CCProgram shader_graph_shape %{

float randomRange (vec2 seed, float minv, float maxv) {
    float randomno = fract(sin(dot(seed, vec2(12.9898, 78.233)))*43758.5453);
    return mix(minv, maxv, randomno);
}

float ellipse (vec2 uv, float width, float height) {
    #if USE_standard_derivatives
        float d = length((uv * 2. - 1.) / vec2(width, height));
        return saturate((1. - d) / fwidth(d));
    #else
        return 1.;
    #endif
}

float rect (vec2 uv, float width, float height) {
    #if USE_standard_derivatives
        vec2 d = abs(uv * 2. - 1.) - vec2(width, width);
        d = 1. - d / fwidth(d);
        return saturate(min(d.x, d.y));
    #else
        return 1.;
    #endif
}

float reoundRect (vec2 uv, float width, float height, float radius) {
    #if USE_standard_derivatives
        radius = max(min(min(abs(radius * 2.), abs(width)), abs(width)), 1e-5);
        vec2 uv = abs(uv * 2. - 1.) - vec2(width, width) + radius;
        float d = length(max(0., uv)) / radius;
        return saturate((1. - d) / fwidth(d));
    #else
        return 1.;
    #endif
}

}%



CCProgram properties %{
  uniform ShaderGraph_Properties {
    
    vec4 empty_value;

  };

  
}%

CCProgram unlit-vs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif

  precision highp float;
  #include <input>
  #include <cc-global>
  #include <cc-local-batch>
  #include <properties>

  
  #include <shader_graph_common>
  #include <shader_graph_shape>


  in vec2 a_texCoord;
  out vec2 v_uv;

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    


    position = position;

    v_uv = a_texCoord;

    return cc_matProj * (cc_matView * matWorld) * position;
  }
}%

CCProgram unlit-fs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif
  
  precision highp float;
  #include <output>
  #include <properties>
  
  
  #include <shader_graph_common>
  #include <shader_graph_shape>


  in vec2 v_uv;

  vec4 frag () {
    vec4 o = vec4(1.);

    

    float var_6 = 0.6499999761581421; // SubGraphNode
    vec2 var_7 = vec2(2., 4.); // SubGraphNode
    float var_8 = 0.5; // SubGraphNode
    vec2 var_9 = vec2(0., 1.); // SubGraphNode
     // SubGraphNode
    vec2 var_55 = v_uv * vec2(var_7) + vec2(0., 0.); // TilingAndOffsetNode
    float var_29 = vec4(var_55, 0., 0.).r; // SplitNode
    float var_30 = vec4(var_55, 0., 0.).g; // SplitNode
     // SplitNode
    float var_35 = mod(var_30, 2.); // ModuloNode
    float var_19 = vec4(var_7, 0., 0.).r; // SplitNode
    float var_20 = vec4(var_7, 0., 0.).g; // SplitNode
     // SplitNode
    float var_44 = step(1., var_35); // StepNode
    float var_61 = var_20 - var_19; // SubtractNode
    float var_38 = var_8 * var_44; // MultiplyNode
    float var_85 = vec4(var_7, 0., 0.).g; // SplitNode
     // SplitNode
    float var_63 = sign(var_61); // SignNode
    float var_90 = vec4(var_7, 0., 0.).r; // SplitNode
     // SplitNode
    float var_41 = var_38 + var_29; // AddNode
    float var_26 = 1. / var_85; // DivideNode
    float var_66 = max(var_63, 0.); // MaximumNode
    float var_81 = -1. / var_90; // DivideNode
    float var_69 = min(var_63, 0.); // MinimumNode
    vec2 var_17 = vec2(var_41, var_30); // Vector2Node
    float var_72 = var_26 * var_66; // MultiplyNode
    float var_78 = var_81 * var_69; // MultiplyNode
    vec2 var_96 = floor(vec2(var_17)); // FloorNode
    float var_106 = vec4(var_9, 0., 0.).r; // SplitNode
    float var_107 = vec4(var_9, 0., 0.).g; // SplitNode
     // SplitNode
    vec2 var_46 = fract(vec2(var_17)); // FractionNode
    float var_14 = var_6 + var_72; // AddNode
    float var_75 = var_6 + var_78; // AddNode
    float var_100 = randomRange(vec2(var_96), var_106, var_107); // RandomRangeNode
    float var_50 = rect(vec2(var_46), var_14, var_75); // RectangleNode
    float var_103 = var_100 * var_50; // MultiplyNode

    o.rgb *= vec3(var_103);
    o.a *= 1.;

    return CCFragOutput(o);
  }
}%
