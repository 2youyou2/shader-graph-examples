// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: pbr-vs:vert
      frag: pbr-fs:frag
      properties: &props
        
        albedo: { value: white }
        metallicaAndSmooth: { value: white }
        normal: { value: white }

  - name: transparent
    passes:
    - vert: pbr-vs:vert
      frag: pbr-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%




CCProgram shader_graph_common %{

#include <common>
#define frac(uv) fract(uv)
#define lerp(min, max, t) mix(min, max, t)

}%



CCProgram properties %{
  uniform ShaderGraph_Properties {
    
    vec4 empty_value;

  };

    uniform sampler2D albedo;
  uniform sampler2D metallicaAndSmooth;
  uniform sampler2D normal;

}%

CCProgram pbr-vs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif

  precision highp float;
  #include <input-standard>
  #include <cc-global>
  #include <cc-local-batch>
  #include <properties>

  in vec3 a_color;
  out vec3 v_color;

  in vec2 a_texCoord;
  out vec2 v_uv;
  in vec2 a_texCoord1;
  out vec2 v_uv1;
  #if USE_LIGHTMAP && !USE_BATCHING && !USE_INSTANCING
    out vec2 v_luv;
  #endif

  
  #include <shader_graph_common>

  out vec3 v_tangent;
out vec3 v_bitangent;
out vec3 v_worldNormal;
out vec3 v_worldPos;


  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    vec4 position = In.position;
    vec3 normal = In.normal;
    vec4 tangent = In.tangent;
    
    vec4 worldPosition = matWorld * position;
    vec4 viewPosition = cc_matView * worldPosition;

    vec3 worldNormal = normalize((matWorldIT * vec4(normal, 0.0)).xyz);
v_tangent = normalize((matWorld * vec4(tangent.xyz, 0.0)).xyz);
v_bitangent = cross(worldNormal, v_tangent) * tangent.w;
v_worldNormal = worldNormal;
v_worldPos = worldPosition.xyz;

    


    position = position;
    normal   = normal;
    tangent  = tangent;

    v_uv = a_texCoord;
    v_uv1 = a_texCoord1;
    v_color = a_color;

    #if USE_LIGHTMAP && HAS_SECOND_UV && !USE_BATCHING && !USE_INSTANCING
      v_luv = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;
    #endif

    return cc_matProj * viewPosition;
  }
}%

CCProgram pbr-fs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif
  
  precision highp float;
  #include <cc-global>
  #include <shading-standard>
  #include <output-standard>
  #include <gamma>
  #include <properties>
  
  
  #include <shader_graph_common>

  in vec3 v_tangent;
in vec3 v_bitangent;
in vec3 v_worldNormal;
in vec3 v_worldPos;


  in vec2 v_uv;
  in vec2 v_uv1;

  #if USE_LIGHTMAP
    in vec2 v_luv;
    #pragma builtin(local)
    layout(binding = 30) uniform sampler2D cc_lightingMap;
  #endif

  void surf (out StandardSurface s) {
    vec3 worldNormal = v_worldNormal;
vec4 worldPosition = vec4(v_worldPos, 1.);

    

     // PropertyNode
    vec4 var_5 = texture(metallicaAndSmooth, v_uv); // SampleTexture2DNode
    float var_6 = var_5.r; // SampleTexture2DNode
     // SampleTexture2DNode
     // PropertyNode
     // PropertyNode
    float var_14 = float(1. - var_6); // InvertColorsNode
    vec4 var_23 = texture(albedo, v_uv); // SampleTexture2DNode
     // SampleTexture2DNode
    vec4 var_15 = texture(normal, v_uv); // SampleTexture2DNode
    var_15.xyz -= vec3(0.5); // SampleTexture2DNode
    var_15.xyz =  // SampleTexture2DNode
      var_15.x * normalize(v_tangent) + // SampleTexture2DNode
      var_15.y * normalize(v_bitangent) + // SampleTexture2DNode
      var_15.z * normalize(worldNormal); // SampleTexture2DNode
     // SampleTexture2DNode
    vec4 var_4 = vec2(0.10000000149011612, 0.6499999761581421).x + (vec4(var_14) - vec2(0., 1.).x) * (vec2(0.10000000149011612, 0.6499999761581421).y - vec2(0.10000000149011612, 0.6499999761581421).x) / (vec2(0., 1.).y - vec2(0., 1.).x); // RemapNode

    s.albedo.a  = 1.;
    if (s.albedo.a <= 0.) {
      discard;
    }

    s.albedo.rgb = vec3(var_23.xyz);
    s.normal    = vec3(var_15.xyz);
    s.position  = worldPosition.xyz;
    s.emissive  = vec3(0., 0., 0.);
    s.metallic  = var_14;
    s.roughness = clamp(1. - var_4.x, 0.04, 1.0);
    s.occlusion = clamp(1., 0., 0.96);
  }

  vec4 frag () {
    StandardSurface s; surf(s);
    vec4 color = CCStandardShading(s);

    #if USE_LIGHTMAP && !USE_BATCHING && !USE_INSTANCING
      vec4 lighting = texture(cc_lightingMap, v_luv);

      float fAmb = 0.5 - s.normal.y * 0.5;
      vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;

      vec3 finalColor = (ambDiff.rgb * s.albedo.rgb);
      finalColor += lighting.rgb *  s.albedo.rgb;
      finalColor = finalColor * s.occlusion;
      finalColor += s.emissive;

      color.rgb = lighting.a * finalColor + (1.0 - lighting.a) * color.rgb;
    #endif

    #if USE_TONEMAP
    return CCFragOutput(color);
    #else
    return color;
    #endif
  }
}%
