// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      
        

  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      
  - name: add
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: &r1 { cullMode: none }
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendSrcAlpha: src_alpha
          blendDstAlpha: one
      
  - name: alpha-blend
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: *r1
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      
}%




CCProgram shader_graph_common %{

#include <common>
#define frac(uv) fract(uv)
#define lerp(min, max, t) mix(min, max, t)

}%



CCProgram properties %{
  uniform ShaderGraph_Properties {
    
    vec4 empty_value;

  };

  
}%

CCProgram unlit-vs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif

  precision highp float;
  #include <input>
  #include <cc-global>
  #include <cc-local-batch>
  #include <properties>

  
  #include <shader_graph_common>

    

  out vec2 v_uv;

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    


    position = position;

    vec4 worldPosition = matWorld * position;
    vec4 viewPosition = cc_matView * worldPosition;

        

    v_uv = a_texCoord;

    return cc_matProj * viewPosition;
  }
}%

CCProgram unlit-fs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif
  
  precision highp float;
  #include <output>
  #include <properties>
  
  
  #include <shader_graph_common>

    
  
  in vec2 v_uv;

  vec4 frag () {
    vec4 o = vec4(1.);

        
    

    vec2 var_6 = vec2(8., 8.); // SubGraphNode
    float var_7 = 163.; // SubGraphNode
    float var_8 = 3.; // SubGraphNode
     // SubGraphNode
    vec2 var_20 = v_uv * vec2(var_6) + vec2(0., 0.); // TilingAndOffsetNode
    vec2 var_16 = ceil(vec2(var_20)); // CeilingNode
    float var_14 = length(vec4(var_16, 0., 0.)); // LengthNode
    float var_23 = var_14 * var_7; // MultiplyNode
    float var_25 = cos(var_23); // CosineNode
    float var_27 = sign(var_25); // SignNode
    float var_29 = vec4(var_20, 0., 0.).r; // SplitNode
    float var_30 = vec4(var_20, 0., 0.).g; // SplitNode
     // SplitNode
    float var_35 = var_27 * var_29; // MultiplyNode
    vec2 var_38 = vec2(var_35, var_30); // Vector2Node
    vec2 var_40 = fract(vec2(var_38)); // FractionNode
    vec2 var_44 = 1. - vec2(var_40); // MinimumNode
    float var_42 = length(vec4(var_40, 0., 0.)); // LengthNode
    float var_46 = length(vec4(var_44, 0., 0.)); // LengthNode
    float var_49 = min(var_42, var_46); // MinimumNode
    float var_52 = var_8 * var_49; // MultiplyNode
    float var_58 = fract(var_52); // FractionNode
    float var_63 = smoothstep(0.800000011920929, 0.6000000238418579, var_58); // SmoothstepNode
    float var_56 = smoothstep(0.4000000059604645, 0.20000000298023224, var_58); // SmoothstepNode
    float var_66 = var_63 - var_56; // SubtractNode

    o.rgb *= vec3(var_66);
    o.a *= 1.;

    return CCFragOutput(o);
  }
}%
