// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      properties: &props
        
        tiling: { value: [5, 5] }
        seed: { value: 560 }

  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
  - name: add
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: &r1 { cullMode: none }
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendSrcAlpha: src_alpha
          blendDstAlpha: one
      properties: *props
  - name: alpha-blend
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: *r1
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%




CCProgram shader_graph_common %{

#include <common>
#define frac(uv) fract(uv)
#define lerp(min, max, t) mix(min, max, t)

}%

CCProgram shader_graph_noise %{

float noise_randomValue (vec2 uv)
{
    return fract(sin(dot(uv, vec2(12.9898, 78.233)))*43758.5453);
}

float noise_interpolate (float a, float b, float t)
{
    return (1.0-t)*a + (t*b);
}

float simpleNoise_valueNoise (vec2 uv)
{
    vec2 i = floor(uv);
    vec2 f = fract(uv);
    f = f * f * (3.0 - 2.0 * f);

    uv = abs(fract(uv) - 0.5);
    vec2 c0 = i + vec2(0.0, 0.0);
    vec2 c1 = i + vec2(1.0, 0.0);
    vec2 c2 = i + vec2(0.0, 1.0);
    vec2 c3 = i + vec2(1.0, 1.0);
    float r0 = noise_randomValue(c0);
    float r1 = noise_randomValue(c1);
    float r2 = noise_randomValue(c2);
    float r3 = noise_randomValue(c3);

    float bottomOfGrid = noise_interpolate(r0, r1, f.x);
    float topOfGrid = noise_interpolate(r2, r3, f.x);
    float t = noise_interpolate(bottomOfGrid, topOfGrid, f.y);
    return t;
}

float simpleNoise (vec2 uv, float scale) {
    float t = 0.0;

    float freq = pow(2.0, 0.);
    float amp = pow(0.5, 3.);
    t += simpleNoise_valueNoise(vec2(uv.x*scale/freq, uv.y*scale/freq))*amp;

    freq = pow(2.0, 1.);
    amp = pow(0.5, 3.-1.);
    t += simpleNoise_valueNoise(vec2(uv.x*scale/freq, uv.y*scale/freq))*amp;

    freq = pow(2.0, 2.);
    amp = pow(0.5, 3.-2.);
    t += simpleNoise_valueNoise(vec2(uv.x*scale/freq, uv.y*scale/freq))*amp;

    return t;
}

vec2 gradientNoiseDir (vec2 p) {
    // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
    p = mod(p, 289.);
    float x = mod((34. * p.x + 1.) * p.x, 289.) + p.y;
    x = mod((34. * x + 1.) * x, 289.);
    x = frac(x / 41.) * 2. - 1.;
    return normalize(vec2(x - floor(x + 0.5), abs(x) - 0.5));
}


float gradientNoise (vec2 uv, float scale) {
    vec2 p = uv * scale;
    vec2 ip = floor(p);
    vec2 fp = frac(p);
    float d00 = dot(gradientNoiseDir(ip), fp);
    float d01 = dot(gradientNoiseDir(ip + vec2(0., 1.)), fp - vec2(0., 1.));
    float d10 = dot(gradientNoiseDir(ip + vec2(1., 0.)), fp - vec2(1., 0.));
    float d11 = dot(gradientNoiseDir(ip + vec2(1., 1.)), fp - vec2(1., 1.));
    fp = fp * fp * fp * (fp * (fp * 6. - 15.) + 10.);
    return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x) + 0.5;
}

}%



CCProgram properties %{
  uniform ShaderGraph_Properties {
    
    vec2 tiling;
    float seed;

  };

  
}%

CCProgram unlit-vs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif

  precision highp float;
  #include <input>
  #include <cc-global>
  #include <cc-local-batch>
  #include <properties>

  
  #include <shader_graph_common>
  #include <shader_graph_noise>

    

  out vec2 v_uv;

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    


    position = position;

    vec4 worldPosition = matWorld * position;
    vec4 viewPosition = cc_matView * worldPosition;

        

    v_uv = a_texCoord;

    return cc_matProj * viewPosition;
  }
}%

CCProgram unlit-fs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif
  
  precision highp float;
  #include <output>
  #include <properties>
  
  
  #include <shader_graph_common>
  #include <shader_graph_noise>

    
  
  in vec2 v_uv;

  vec4 frag () {
    vec4 o = vec4(1.);

        
    

     // PropertyNode
    vec2 var_224 = v_uv * vec2(tiling) + vec2(0., 0.); // TilingAndOffsetNode
    vec2 var_218 = floor(vec2(var_224)); // FloorNode
     // PropertyNode
    float var_175 = simpleNoise(vec2(var_218), seed); // NoiseNode
    vec4 var_185 = vec4(var_175) - vec4(0.5, 0.5, 1., 1.); // SubtractNode
    vec2 var_220 = fract(vec2(var_224)); // FractionNode
    vec4 var_182 = vec4(2., 2., 0., 0.) * vec4(var_185); // MultiplyNode
    float var_169 = vec4(var_220, 0., 0.).r; // SplitNode
    float var_170 = vec4(var_220, 0., 0.).g; // SplitNode
     // SplitNode
    vec4 var_179 = fract(vec4(var_182)); // FractionNode
    float var_164 = 1. - var_169; // MinimumNode
    vec4 var_157 = step(vec4(0.75, 1., 1., 1.), vec4(var_179)); // StepNode
    vec4 var_151 = step(vec4(0.5, 1., 1., 1.), vec4(var_179)); // StepNode
    vec2 var_167 = vec2(var_164, var_170); // Vector2Node
    vec4 var_136 = vec4(var_179); // PreviewNode
    vec2 var_177 = 1. - vec2(var_220); // MinimumNode
    vec4 var_148 = vec4(var_151) - vec4(var_157); // SubtractNode
    vec2 var_162 = 1. - vec2(var_167); // MinimumNode
    vec4 var_145 = step(vec4(0.25, 1., 1., 1.), vec4(var_136)); // StepNode
    vec4 var_154 = vec4(var_157) * vec4(var_177, 0., 0.); // MultiplyNode
    vec4 var_160 = vec4(var_148) * vec4(var_162, 0., 0.); // MultiplyNode
    vec4 var_142 = vec4(var_145) - vec4(var_151); // SubtractNode
    vec4 var_134 = vec4(var_154) + vec4(var_160); // AddNode
    vec4 var_139 = vec4(var_167, 0., 0.) * vec4(var_142); // MultiplyNode
    vec4 var_122 = 1. - vec4(var_145); // MinimumNode
    vec2 var_120 = vec2(var_220); // PreviewNode
    vec4 var_131 = vec4(var_134) + vec4(var_139); // AddNode
    vec4 var_125 = vec4(var_122) * vec4(var_120, 0., 0.); // MultiplyNode
    vec4 var_128 = vec4(var_131) + vec4(var_125); // AddNode
    vec4 var_84 = vec4(var_128) - vec4(0.5, 1., 1., 1.); // SubtractNode
    vec4 var_50 = vec4(var_128) - vec4(1., 0.5, 1., 1.); // SubtractNode
    vec2 var_51 = vec2(0., 0.); // SubGraphNode
    vec2 var_52 = vec2(0.44999998807907104, 0.4000000059604645); // SubGraphNode
    vec2 var_53 = vec2(0.3499999940395355, 0.30000001192092896); // SubGraphNode
     // SubGraphNode
    vec2 var_88 = vec2(0., 0.); // SubGraphNode
    vec2 var_89 = vec2(0.699999988079071, 0.6499999761581421); // SubGraphNode
    vec2 var_90 = vec2(0.6000000238418579, 0.550000011920929); // SubGraphNode
     // SubGraphNode
    vec2 var_9 = vec2(0., 0.); // SubGraphNode
    vec2 var_10 = vec2(0.20000000298023224, 0.15000000596046448); // SubGraphNode
    vec2 var_11 = vec2(0.10000000149011612, 0.05000000074505806); // SubGraphNode
     // SubGraphNode
    vec2 var_186 = vec2(0., 0.); // SubGraphNode
    vec2 var_187 = vec2(0.20000000298023224, 0.15000000596046448); // SubGraphNode
    vec2 var_188 = vec2(0.10000000149011612, 0.05000000074505806); // SubGraphNode
     // SubGraphNode
    float var_78 = vec4(var_52, 0., 0.).r; // SplitNode
    float var_79 = vec4(var_52, 0., 0.).g; // SplitNode
     // SplitNode
    float var_57 = length(vec4(var_128)); // LengthNode
    float var_73 = vec4(var_53, 0., 0.).r; // SplitNode
    float var_74 = vec4(var_53, 0., 0.).g; // SplitNode
     // SplitNode
    float var_115 = vec4(var_89, 0., 0.).r; // SplitNode
    float var_116 = vec4(var_89, 0., 0.).g; // SplitNode
     // SplitNode
    float var_94 = length(vec4(var_128)); // LengthNode
    float var_110 = vec4(var_90, 0., 0.).r; // SplitNode
    float var_111 = vec4(var_90, 0., 0.).g; // SplitNode
     // SplitNode
    float var_36 = vec4(var_10, 0., 0.).r; // SplitNode
    float var_37 = vec4(var_10, 0., 0.).g; // SplitNode
     // SplitNode
    float var_15 = length(vec4(var_84)); // LengthNode
    float var_31 = vec4(var_11, 0., 0.).r; // SplitNode
    float var_32 = vec4(var_11, 0., 0.).g; // SplitNode
     // SplitNode
    float var_213 = vec4(var_187, 0., 0.).r; // SplitNode
    float var_214 = vec4(var_187, 0., 0.).g; // SplitNode
     // SplitNode
    float var_192 = length(vec4(var_50)); // LengthNode
    float var_208 = vec4(var_188, 0., 0.).r; // SplitNode
    float var_209 = vec4(var_188, 0., 0.).g; // SplitNode
     // SplitNode
    float var_65 = smoothstep(var_78, var_79, var_57); // SmoothstepNode
    float var_61 = smoothstep(var_73, var_74, var_57); // SmoothstepNode
    float var_102 = smoothstep(var_115, var_116, var_94); // SmoothstepNode
    float var_98 = smoothstep(var_110, var_111, var_94); // SmoothstepNode
    float var_23 = smoothstep(var_36, var_37, var_15); // SmoothstepNode
    float var_19 = smoothstep(var_31, var_32, var_15); // SmoothstepNode
    float var_200 = smoothstep(var_213, var_214, var_192); // SmoothstepNode
    float var_196 = smoothstep(var_208, var_209, var_192); // SmoothstepNode
    float var_68 = var_65 - var_61; // SubtractNode
    float var_105 = var_102 - var_98; // SubtractNode
    float var_26 = var_23 - var_19; // SubtractNode
    float var_203 = var_200 - var_196; // SubtractNode
    float var_87 = var_68 + var_105; // AddNode
    float var_47 = var_26 + var_203; // AddNode
    float var_44 = var_87 + var_47; // AddNode

    o.rgb *= vec3(var_44);
    o.a *= 1.;

    return CCFragOutput(o);
  }
}%
