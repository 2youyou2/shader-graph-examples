// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      
        

  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      
  - name: add
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: &r1 { cullMode: none }
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendSrcAlpha: src_alpha
          blendDstAlpha: one
      
  - name: alpha-blend
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: *r1
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      
}%




CCProgram shader_graph_common %{

#include <common>
#define frac(uv) fract(uv)
#define lerp(min, max, t) mix(min, max, t)

}%



CCProgram shader_graph_uv %{

    vec2 polarCoordinates (vec2 uv, vec2 center, float radialScale, float lengthScale) {
        vec2 delta = uv - center;
        float radius = length(delta) * 2. * radialScale;
        float angle = atan(delta.y, delta.x) * 1.0/6.28 * lengthScale;
        return vec2(radius, angle);
    }

    vec2 rotateCoordinates (vec2 uv, vec2 center, float rotation) {
        //rotation matrix
        uv -= center;
        float s = sin(rotation);
        float c = cos(rotation);

        //center rotation matrix
        mat2 rMatrix = mat2(c, -s, s, c);
        rMatrix *= 0.5;
        rMatrix += 0.5;
        rMatrix = rMatrix*2. - 1.;

        //multiply the UVs by the rotation matrix
        uv *= rMatrix;
        uv += center;

        return uv;
    }

}%



CCProgram properties %{
  uniform ShaderGraph_Properties {
    
    vec4 empty_value;

  };

  
}%

CCProgram unlit-vs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif

  precision highp float;
  #include <input>
  #include <cc-global>
  #include <cc-local-batch>
  #include <properties>

  
  #include <shader_graph_common>
  #include <shader_graph_uv>

  

  in vec2 a_texCoord;
  out vec2 v_uv;

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    


    position = position;

    vec4 worldPosition = matWorld * position;
    vec4 viewPosition = cc_matView * worldPosition;

    

    v_uv = a_texCoord;

    return cc_matProj * viewPosition;
  }
}%

CCProgram unlit-fs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif
  
  precision highp float;
  #include <output>
  #include <properties>
  
  
  #include <shader_graph_common>
  #include <shader_graph_uv>

  
  
  in vec2 v_uv;

  vec4 frag () {
    vec4 o = vec4(1.);

    
    

    vec2 var_6 = vec2(1., 1.); // SubGraphNode
    vec2 var_7 = vec2(0.5, 0.5); // SubGraphNode
    float var_8 = 8.; // SubGraphNode
    float var_9 = 2.; // SubGraphNode
    float var_10 = 1.; // SubGraphNode
     // SubGraphNode
    vec2 var_35 = v_uv * vec2(var_6) + vec2(0., 0.); // TilingAndOffsetNode
    vec2 var_40 = polarCoordinates(vec2(var_35), vec2(var_7), 1., 1.); // PolarCoordinatesNode
    float var_42 = vec4(var_40, 0., 0.).r; // SplitNode
    float var_43 = vec4(var_40, 0., 0.).g; // SplitNode
     // SplitNode
    float var_49 = var_10 / 6.2831854820251465; // DivideNode
    float var_17 = var_49 * var_42; // MultiplyNode
    float var_25 = var_43 - var_17; // SubtractNode
    float var_20 = var_25 * var_8; // MultiplyNode
    float var_22 = floor(var_20 + 0.5); // RoundNode
    float var_28 = var_20 - var_22; // SubtractNode
    float var_31 = abs(var_28); // AbsoluteNode
    float var_53 = var_31 * var_9; // MultiplyNode
    float var_57 = smoothstep(0.44999998807907104, 0.550000011920929, var_53); // SmoothstepNode

    o.rgb *= vec3(var_57);
    o.a *= 1.;

    return CCFragOutput(o);
  }
}%
