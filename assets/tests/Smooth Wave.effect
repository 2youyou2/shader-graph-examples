// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      
        

  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      
  - name: add
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: &r1 { cullMode: none }
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendSrcAlpha: src_alpha
          blendDstAlpha: one
      
  - name: alpha-blend
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: *r1
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      
}%




CCProgram shader_graph_common %{

#define saturate(Value) clamp(Value, 0., 1.)
#define frac(uv) fract(uv)

}%



CCProgram properties %{
  uniform ShaderGraph_Properties {
    
    vec4 empty_value;

  };

  
}%

CCProgram unlit-vs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif

  precision highp float;
  #include <input>
  #include <cc-global>
  #include <cc-local-batch>
  #include <properties>

  
  #include <shader_graph_common>


  in vec2 a_texCoord;
  out vec2 v_uv;

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    


    position = position;

    v_uv = a_texCoord;

    return cc_matProj * (cc_matView * matWorld) * position;
  }
}%

CCProgram unlit-fs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif
  
  precision highp float;
  #include <output>
  #include <properties>
  
  
  #include <shader_graph_common>


  in vec2 v_uv;

  vec4 frag () {
    vec4 o = vec4(1.);

    

    vec2 var_6 = vec2(1., 1.); // SubGraphNode
    float var_7 = 0.5; // SubGraphNode
    float var_8 = 0.25; // SubGraphNode
     // SubGraphNode
    vec2 var_47 = v_uv * vec2(var_6) + vec2(0., 0.); // TilingAndOffsetNode
    float var_12 = vec4(var_47, 0., 0.).r; // SplitNode
    float var_13 = vec4(var_47, 0., 0.).g; // SplitNode
     // SplitNode
    float var_23 = var_12 / var_7; // DivideNode
    float var_40 = var_23 * 6.283185005187988; // MultiplyNode
    float var_17 = sin(var_40); // SineNode
    float var_26 = var_13 / var_8; // DivideNode
    vec4 var_30 = vec2(0., 1.).x + (vec4(var_17) - vec2(-1., 1.).x) * (vec2(0., 1.).y - vec2(0., 1.).x) / (vec2(-1., 1.).y - vec2(-1., 1.).x); // RemapNode
    float var_20 = var_26 - var_30.x; // SubtractNode
    float var_35 = floor(var_20 + 0.5); // RoundNode
    float var_33 = var_20 - var_35; // SubtractNode
    float var_37 = abs(var_33); // AbsoluteNode
    float var_50 = 2. * var_37; // MultiplyNode
    float var_54 = smoothstep(0.5, 0.550000011920929, var_50); // SmoothstepNode

    o.rgb *= vec3(var_54);
    o.a *= 1.;

    return CCFragOutput(o);
  }
}%
