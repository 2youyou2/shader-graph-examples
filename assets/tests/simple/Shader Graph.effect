// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      properties: &props
        
        Color: { value: [0.09344962239265442, 0.14180755615234375, 0.9433962106704712,  0] , editor: { type: color }}

  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
  - name: add
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: &r1 { cullMode: none }
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendSrcAlpha: src_alpha
          blendDstAlpha: one
      properties: *props
  - name: alpha-blend
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: *r1
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%



CCProgram shader_graph_common %{

#define saturate(Value) clamp(Value, 0., 1.)

float randomRange (vec2 seed, float min, float max) {
    float randomno = frac(sin(dot(seed, vec2(12.9898, 78.233)))*43758.5453);
    return lerp(min, max, randomno);
}

float ellipse (vec2 uv, float width, float height) {
    #if USE_standard_derivatives
        float d = length((uv * 2. - 1.) / vec2(width, height));
        return saturate((1. - d) / fwidth(d));
    #else
        return 1.;
    #endif
}

}%


CCProgram properties %{
  uniform ShaderGraph_Properties {
    
    vec4 Color;

  };

  
}%

CCProgram unlit-vs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif

  precision highp float;
  #include <input>
  #include <cc-global>
  #include <cc-local-batch>
  #include <properties>

  
  #include <shader_graph_common>
        

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    


    position = position;

    return cc_matProj * (cc_matView * matWorld) * position;
  }
}%

CCProgram unlit-fs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif
  
  precision highp float;
  #include <output>
  #include <properties>
  
  
  #include <shader_graph_common>
        

  vec4 frag () {
    vec4 o = vec4(1.);

    

    float var_19 = 2.;
    vec4 var_11 = vec4(var_19, 0., 0., 0.);
    vec2 var_17 = vec2(var_19, 0.);
    vec4 var_6 = Color;
    vec2 var_14 = var_11.xy + var_17;

    o.rgb *= var_6.xyz;
    o.a *= var_14.x;

    return CCFragOutput(o);
  }
}%
