// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: pbr-vs:vert
      frag: pbr-fs
      properties: &props
        
        Cubemap: { value: white }

  - name: transparent
    passes:
    - vert: pbr-vs:vert
      frag: pbr-fs
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%




CCProgram shader_graph_common %{

#include <common>
#define frac(uv) fract(uv)
#define lerp(min, max, t) mix(min, max, t)

}%



CCProgram properties %{
  uniform ShaderGraph_Properties {
    
    vec4 empty_value;

  };

    uniform samplerCube Cubemap;

}%

CCProgram pbr-vs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif

  precision highp float;
  #include <input-standard>
  #include <cc-global>
  #include <cc-local-batch>
  #include <properties>

  #include <cc-fog-vs>
  #include <cc-shadow-map-vs>

  in vec3 a_color;
  out vec3 v_color;

  out vec2 v_uv;
  in vec2 a_texCoord1;
  out vec2 v_uv1;

  
  #include <shader_graph_common>

    
  out vec3 v_worldPos;
  out vec3 v_view;
  out vec3 v_normal;
  out vec3 v_worldNormal;

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    vec4 position = In.position;
    vec3 normal = In.normal;
    vec4 tangent = In.tangent;
    
    vec4 worldPosition = matWorld * position;
    vec4 viewPosition = cc_matView * worldPosition;

        
    vec3 worldNormal = normalize((matWorldIT * vec4(normal, 0.0)).xyz);
    vec3 worldView = cc_cameraPos.xyz - worldPosition.xyz;
    vec3 view = (matWorldIT * vec4(worldView, 0.0)).xyz;
    v_worldPos = worldPosition.xyz;
    v_view = view;
    v_normal = normal;
    v_worldNormal = worldNormal;
    


    position = position;
    normal   = normal;
    tangent  = tangent;

    v_uv = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
    #endif

    #if HAS_SECOND_UV
      v_uv1 = a_texCoord1;
      #if SAMPLE_FROM_RT
        CC_HANDLE_RT_SAMPLE_FLIP(v_uv1);
      #endif
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

    CC_TRANSFER_FOG(worldPosition);
    CC_TRANSFER_SHADOW(worldPosition);

    #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD
      CCLightingMapCaclUV();
    #endif

    return cc_matProj * viewPosition;
  }
}%

CCProgram pbr-fs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif
  
  precision highp float;
  #include <cc-global>
  #include <properties>
  #include <cc-fog-fs>
  #include <standard-surface-entry>
  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD
    #include <lightingmap-fs>
  #endif

  
  #include <shader_graph_common>

    
  in vec3 v_worldPos;
  in vec3 v_view;
  in vec3 v_normal;
  in vec3 v_worldNormal;

  in vec2 v_uv;
  in vec2 v_uv1;

  void surf (out StandardSurface s) {
        
    vec4 worldPosition = vec4(v_worldPos, 1.);
    vec3 view = v_view;
    vec3 normal = v_normal;
    vec3 worldNormal = v_worldNormal;
    

     // PropertyNode
    vec3 var_17 = view; // ViewDirectionNode
    vec3 var_11_R = reflect( -normalize( var_17 ), normal ); // SampleTexture2DNode
    vec4 var_11 = texture(Cubemap, var_11_R); // SampleTexture2DNode
     // SampleTexture2DNode

    s.albedo.a  = 1.;
    if (s.albedo.a <= 0.) {
      discard;
    }

    s.albedo.rgb = vec3(0., 0., 0.);
    s.normal    = worldNormal;
    s.position  = worldPosition.xyz;
    s.emissive  = vec3(var_11.xyz);
    s.metallic  = 0.;
    s.roughness = clamp(1. - 0., 0.04, 1.0);
    s.occlusion = clamp(1., 0., 0.96);

    #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD
      vec4 lightColor = texture(cc_lightingMap, v_luv.xy);
      s.lightmap = UnpackLightingmap(lightColor);
      s.lightmap_test = v_luv.z; /*u scale*/
    #endif
  }

  CC_STANDARD_SURFACE_ENTRY()
}%
