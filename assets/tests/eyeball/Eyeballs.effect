// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: pbr-vs:vert
      frag: pbr-fs:frag
      properties: &props
        
        Iris_Texture: { value: white }
        Pupil_Texture: { value: white }
        Glint_Texture: { value: white }
        Iris_Color_Inner: { value: [1, 0.5163196325302124, 0.027450978755950928,  0] , editor: { type: color }}
        Iris_Color_Outer: { value: [0.8773584961891174, 0.15726238489151, 0.15726238489151,  0] , editor: { type: color }}
        Iris_Texture_Tint: { value: [0.38679248094558716, 0.297392338514328, 0.297392338514328,  0] , editor: { type: color }}
        Iris_Edge_Color: { value: [0.7264150977134705, 0.08223564922809601, 0.08223564922809601,  0] , editor: { type: color }}
        Eyewhite_Color: { value: [0.9622641801834106, 0.9350302815437317, 0.9350302815437317,  0] , editor: { type: color }}
        Pupil_Color_Outer: { value: [0, 0, 0,  0] , editor: { type: color }}
        Pupil_Color_Inner: { value: [0, 0, 0,  0] , editor: { type: color }}
        Iris_Radius: { value: 0.3029927611351013 }
        Iris_Texture_Scale: { value: 1 }
        Iris_Texture_Distortion: { value: 1.8612339496612549 }
        Iris_Texture_Brightness: { value: 2 }
        Iris_Edge_Width: { value: 0.10000000149011612 }
        Pupil_Radius: { value: 0.10000000149011612 }
        Pupil_Texture_Scale: { value: 0.6301787495613098 }
        Glint_Scale: { value: 0.4000000059604645 }
        Speed: { value: 0 }

  - name: transparent
    passes:
    - vert: pbr-vs:vert
      frag: pbr-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%




CCProgram shader_graph_common %{

#include <common>
#define frac(uv) fract(uv)
#define lerp(min, max, t) mix(min, max, t)

}%



CCProgram properties %{
  uniform ShaderGraph_Properties {
    
    vec4 Iris_Color_Inner;
    vec4 Iris_Color_Outer;
    vec4 Iris_Texture_Tint;
    vec4 Iris_Edge_Color;
    vec4 Eyewhite_Color;
    vec4 Pupil_Color_Outer;
    vec4 Pupil_Color_Inner;
    float Iris_Radius;
    float Iris_Texture_Scale;
    float Iris_Texture_Distortion;
    float Iris_Texture_Brightness;
    float Iris_Edge_Width;
    float Pupil_Radius;
    float Pupil_Texture_Scale;
    float Glint_Scale;
    float Speed;

  };

    uniform sampler2D Iris_Texture;
  uniform sampler2D Pupil_Texture;
  uniform sampler2D Glint_Texture;

}%

CCProgram pbr-vs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif

  precision highp float;
  #include <input-standard>
  #include <cc-global>
  #include <cc-local-batch>
  #include <properties>

  #include <cc-shadow-map-vs>

  in vec3 a_color;
  out vec3 v_color;

  out vec2 v_uv;
  in vec2 a_texCoord1;
  out vec2 v_uv1;
  #if USE_LIGHTMAP && !USE_BATCHING && !USE_INSTANCING
    out vec2 v_luv;
  #endif

  
  #include <shader_graph_common>

    
  out vec3 v_pos;
  out vec3 v_worldPos;
  out vec3 v_view;
  out vec3 v_worldNormal;

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    vec4 position = In.position;
    vec3 normal = In.normal;
    vec4 tangent = In.tangent;
    
    vec4 worldPosition = matWorld * position;
    vec4 viewPosition = cc_matView * worldPosition;

        
    vec3 worldNormal = normalize((matWorldIT * vec4(normal, 0.0)).xyz);
    vec3 worldView = cc_cameraPos.xyz - worldPosition.xyz;
    vec3 view = (matWorldIT * vec4(worldView, 0.0)).xyz;
    v_pos = position.xyz;
    v_worldPos = worldPosition.xyz;
    v_view = view;
    v_worldNormal = worldNormal;
    


    position = position;
    normal   = normal;
    tangent  = tangent;

    v_uv = a_texCoord;
    v_uv1 = a_texCoord1;
    v_color = a_color;

    #if USE_LIGHTMAP && HAS_SECOND_UV && !USE_BATCHING && !USE_INSTANCING
      v_luv = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;
    #endif

    CCPassShadowParams(worldPosition);

    return cc_matProj * viewPosition;
  }
}%

CCProgram pbr-fs %{
  #if USE_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
  #endif
  
  precision highp float;
  #include <cc-global>
  #include <shading-standard>
  #include <output-standard>
  #include <gamma>
  #include <properties>
  
  
  #include <shader_graph_common>

    
  in vec3 v_pos;
  in vec3 v_worldPos;
  in vec3 v_view;
  in vec3 v_worldNormal;

  in vec2 v_uv;
  in vec2 v_uv1;

  #if USE_LIGHTMAP
    in vec2 v_luv;
    #pragma builtin(local)
    layout(binding = 30) uniform sampler2D cc_lightingMap;
  #endif

  void surf (out StandardSurface s) {
        
    vec4 position = vec4(v_pos, 1.);
    vec4 worldPosition = vec4(v_worldPos, 1.);
    vec3 view = v_view;
    vec3 worldNormal = v_worldNormal;
    

    vec3 var_104 = v_pos; // PositionNode
     // PropertyNode
    float var_100 = vec4(var_104, 0.).r; // SplitNode
    float var_101 = vec4(var_104, 0.).g; // SplitNode
    float var_102 = vec4(var_104, 0.).b; // SplitNode
     // SplitNode
    vec4 var_76 = texture(Iris_Texture, v_uv); // SampleTexture2DNode
     // SampleTexture2DNode
     // PropertyNode
    vec4 var_111 = vec4(var_102) - vec4(0.5, 1., 1., 1.); // SubtractNode
    vec3 var_164 = v_pos; // PositionNode
    vec4 var_75 = vec4(var_76) * vec4(Iris_Texture_Distortion); // MultiplyNode
     // PropertyNode
    float var_0 = cc_time.x; // TimeNode
    vec3 var_116 = vec3(var_100, var_101, var_111.x); // Vector3Node
    float var_185 = vec4(var_164, 0.).r; // SplitNode
    float var_186 = vec4(var_164, 0.).g; // SplitNode
     // SplitNode
    float var_64 = vec4(var_75).g; // SplitNode
     // SplitNode
    float var_8 = Speed * var_0; // MultiplyNode
    float var_107 = distance(vec4(0., 0., 0., 0.), vec4(var_116, 0.)); // DistanceNode
    float var_222 = -var_185; // NegateNode
     // PropertyNode
    vec2 var_96 = v_uv; // UVNode
    float var_28 = var_64 + var_8; // AddNode
     // PropertyNode
     // PropertyNode
    vec2 var_182 = vec2(var_222, var_186); // Vector2Node
     // PropertyNode
    float var_24 = var_107 / Pupil_Radius; // DivideNode
    vec2 var_225 = vec2(var_107) * vec2(var_96); // MultiplyNode
     // PropertyNode
    vec2 var_69 = vec2(var_96.x, var_28); // Vector2Node
    float var_61 = Iris_Radius + Iris_Edge_Width; // AddNode
    float var_122 = var_107 / Iris_Radius; // DivideNode
    vec2 var_179 = vec2(var_182) / vec2(Pupil_Texture_Scale); // DivideNode
    float var_15 = 1. - var_24; // MinimumNode
    vec2 var_229 = vec2(var_225) * vec2(Iris_Texture_Scale) + vec2(var_69); // TilingAndOffsetNode
    float var_44 = var_107 / var_61; // DivideNode
    float var_135 = 1. - var_122; // MinimumNode
     // PropertyNode
    vec4 var_176 = vec4(var_179, 0., 0.) + vec4(0.5, 0.5, 0., 0.); // AddNode
    float var_18 = var_15 * 50.; // MultiplyNode
    vec4 var_84 = texture(Iris_Texture, vec2(var_229)); // SampleTexture2DNode
     // SampleTexture2DNode
     // PropertyNode
    float var_53 = 1. - var_44; // MinimumNode
    float var_138 = var_135 * 50.; // MultiplyNode
    vec4 var_165 = texture(Pupil_Texture, vec2(var_176.xy)); // SampleTexture2DNode
     // SampleTexture2DNode
    float var_21 = saturate(var_18); // SaturateNode
     // PropertyNode
     // PropertyNode
    vec4 var_72 = vec4(var_84) * vec4(Iris_Texture_Tint); // MultiplyNode
     // PropertyNode
    float var_56 = var_53 * 20.; // MultiplyNode
    float var_140 = saturate(var_138); // SaturateNode
    vec4 var_191 = vec4(var_165) * vec4(var_21); // MultiplyNode
     // PropertyNode
     // PropertyNode
    vec4 var_144 = mix(vec4(Iris_Color_Outer), vec4(Iris_Color_Inner), vec4(var_122)); // LerpNode
    vec4 var_119 = vec4(var_72) * vec4(Iris_Texture_Brightness); // MultiplyNode
    float var_58 = saturate(var_56); // SaturateNode
    vec4 var_155 = mix(vec4(Pupil_Color_Inner), vec4(Pupil_Color_Outer), vec4(var_24)); // LerpNode
    vec4 var_13 = vec4(var_140) - vec4(var_191); // SubtractNode
    vec4 var_94 = vec4(var_144) + vec4(var_119); // AddNode
     // PropertyNode
    float var_41 = var_58 - var_140; // SubtractNode
    vec4 var_158 = vec4(var_191) * vec4(var_155); // MultiplyNode
    vec4 var_147 = vec4(var_13) * vec4(var_94); // MultiplyNode
     // PropertyNode
    float var_36 = 1. - var_58; // MinimumNode
    vec4 var_47 = vec4(Iris_Edge_Color) * vec4(var_41); // MultiplyNode
    vec4 var_161 = vec4(var_158) + vec4(var_147); // AddNode
    vec4 var_34 = vec4(Eyewhite_Color) * vec4(var_36); // MultiplyNode
    vec4 var_51 = vec4(var_47) + vec4(var_161); // AddNode
    vec4 var_31 = vec4(var_34) + vec4(var_51); // AddNode

    s.albedo.a  = 1.;
    if (s.albedo.a <= 0.5) {
      discard;
    }

    s.albedo.rgb = vec3(var_31.xyz);
    s.normal    = worldNormal;
    s.position  = worldPosition.xyz;
    s.emissive  = vec3(0., 0., 0.);
    s.metallic  = 0.;
    s.roughness = clamp(1. - 0.8500000238418579, 0.04, 1.0);
    s.occlusion = clamp(1., 0., 0.96);
  }

  vec4 frag () {
    StandardSurface s; surf(s);
    vec4 color = CCStandardShading(s);

    #if USE_LIGHTMAP && !USE_BATCHING && !USE_INSTANCING
      vec4 lighting = texture(cc_lightingMap, v_luv);

      float fAmb = 0.5 - s.normal.y * 0.5;
      vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;

      vec3 finalColor = (ambDiff.rgb * s.albedo.rgb);
      finalColor += lighting.rgb *  s.albedo.rgb;
      finalColor = finalColor * s.occlusion;
      finalColor += s.emissive;

      color.rgb = lighting.a * finalColor + (1.0 - lighting.a) * color.rgb;
    #endif

    #if USE_TONEMAP
      return CCFragOutput(color);
    #else
      return color;
    #endif
  }
}%
