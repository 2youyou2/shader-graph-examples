"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("../../../base");
const type_1 = require("../../../type");
class PositionNode extends base_1.ShaderNode {
    constructor(data) {
        super(data);
        this.concretePrecisionType = type_1.ConcretePrecisionType.Fixed;
        let varing = 'PositionSpace.Object';
        if (this.data.m_Space === type_1.PositionSpace.Object) {
            varing = 'PositionSpace.Object';
        }
        else if (this.data.m_Space === type_1.PositionSpace.View) {
            varing = 'PositionSpace.View';
        }
        else if (this.data.m_Space === type_1.PositionSpace.Tangent) {
            varing = 'PositionSpace.Tangent';
            console.error('Not support Tangent Position');
        }
        else if (this.data.m_Space === type_1.PositionSpace.World) {
            varing = 'PositionSpace.World';
        }
        else if (this.data.m_Space === type_1.PositionSpace.AbsoluteWorld) {
            varing = 'PositionSpace.AbsoluteWorld';
        }
        this.depVarings.push(varing);
    }
    calcConcretePrecision() {
        this.slots.forEach(slot => {
            slot._concretePrecision = 3;
        });
    }
    generateCode() {
        let name = 'position.xyz';
        if (this.data.m_Space === type_1.PositionSpace.Object) {
            name = 'position.xyz';
        }
        else if (this.data.m_Space === type_1.PositionSpace.View) {
            name = 'viewPosition.xyz';
        }
        else if (this.data.m_Space === type_1.PositionSpace.Tangent) {
            // name = 'v_tangentPos';
            name = 'worldPosition.xyz';
        }
        else if (this.data.m_Space === type_1.PositionSpace.World) {
            name = 'worldPosition.xyz';
        }
        else if (this.data.m_Space === type_1.PositionSpace.AbsoluteWorld) {
            name = 'worldPosition.xyz';
        }
        return `${this.getOutputVarDefine(0)} = ${name};`;
    }
}
exports.default = PositionNode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9zaXRpb25Ob2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc291cmNlL3BhbmVsL29wZXJhdGlvbi9ub2Rlcy9pbnB1dC9nZW9tZXRyeS9Qb3NpdGlvbk5vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3Q0FBMkM7QUFDM0Msd0NBQXFFO0FBR3JFLE1BQXFCLFlBQWEsU0FBUSxpQkFBVTtJQUdoRCxZQUFhLElBQUk7UUFDYixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFIZiwwQkFBcUIsR0FBRyw0QkFBcUIsQ0FBQyxLQUFLLENBQUM7UUFLaEQsSUFBSSxNQUFNLEdBQUcsc0JBQXNCLENBQUE7UUFDbkMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxvQkFBYSxDQUFDLE1BQU0sRUFBRTtZQUM1QyxNQUFNLEdBQUcsc0JBQXNCLENBQUM7U0FDbkM7YUFDSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLG9CQUFhLENBQUMsSUFBSSxFQUFFO1lBQy9DLE1BQU0sR0FBRyxvQkFBb0IsQ0FBQztTQUNqQzthQUNJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssb0JBQWEsQ0FBQyxPQUFPLEVBQUU7WUFDbEQsTUFBTSxHQUFHLHVCQUF1QixDQUFDO1lBQ2pDLE9BQU8sQ0FBQyxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztTQUNqRDthQUNJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssb0JBQWEsQ0FBQyxLQUFLLEVBQUU7WUFDaEQsTUFBTSxHQUFHLHFCQUFxQixDQUFDO1NBQ2xDO2FBQ0ksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxvQkFBYSxDQUFDLGFBQWEsRUFBRTtZQUN4RCxNQUFNLEdBQUcsNkJBQTZCLENBQUM7U0FDMUM7UUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQscUJBQXFCO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQsWUFBWTtRQUNSLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQztRQUNuQixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLG9CQUFhLENBQUMsTUFBTSxFQUFFO1lBQzVDLElBQUksR0FBRyxPQUFPLENBQUM7U0FDbEI7YUFDSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLG9CQUFhLENBQUMsSUFBSSxFQUFFO1lBQy9DLElBQUksR0FBRyxXQUFXLENBQUM7U0FDdEI7YUFDSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLG9CQUFhLENBQUMsT0FBTyxFQUFFO1lBQ2xELHlCQUF5QjtZQUN6QixJQUFJLEdBQUcsWUFBWSxDQUFDO1NBQ3ZCO2FBQ0ksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxvQkFBYSxDQUFDLEtBQUssRUFBRTtZQUNoRCxJQUFJLEdBQUcsWUFBWSxDQUFDO1NBQ3ZCO2FBQ0ksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxvQkFBYSxDQUFDLGFBQWEsRUFBRTtZQUN4RCxJQUFJLEdBQUcsWUFBWSxDQUFDO1NBQ3ZCO1FBQ0QsT0FBTyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQztJQUN0RCxDQUFDO0NBQ0o7QUFyREQsK0JBcURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2hhZGVyTm9kZSB9IGZyb20gXCIuLi8uLi8uLi9iYXNlXCI7XHJcbmltcG9ydCB7IENvbmNyZXRlUHJlY2lzaW9uVHlwZSwgUG9zaXRpb25TcGFjZSB9IGZyb20gXCIuLi8uLi8uLi90eXBlXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9zaXRpb25Ob2RlIGV4dGVuZHMgU2hhZGVyTm9kZSB7XHJcbiAgICBjb25jcmV0ZVByZWNpc2lvblR5cGUgPSBDb25jcmV0ZVByZWNpc2lvblR5cGUuRml4ZWQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IgKGRhdGEpIHtcclxuICAgICAgICBzdXBlcihkYXRhKVxyXG5cclxuICAgICAgICBsZXQgdmFyaW5nID0gJ1Bvc2l0aW9uU3BhY2UuT2JqZWN0J1xyXG4gICAgICAgIGlmICh0aGlzLmRhdGEubV9TcGFjZSA9PT0gUG9zaXRpb25TcGFjZS5PYmplY3QpIHtcclxuICAgICAgICAgICAgdmFyaW5nID0gJ1Bvc2l0aW9uU3BhY2UuT2JqZWN0JztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5kYXRhLm1fU3BhY2UgPT09IFBvc2l0aW9uU3BhY2UuVmlldykge1xyXG4gICAgICAgICAgICB2YXJpbmcgPSAnUG9zaXRpb25TcGFjZS5WaWV3JztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5kYXRhLm1fU3BhY2UgPT09IFBvc2l0aW9uU3BhY2UuVGFuZ2VudCkge1xyXG4gICAgICAgICAgICB2YXJpbmcgPSAnUG9zaXRpb25TcGFjZS5UYW5nZW50JztcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignTm90IHN1cHBvcnQgVGFuZ2VudCBQb3NpdGlvbicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmRhdGEubV9TcGFjZSA9PT0gUG9zaXRpb25TcGFjZS5Xb3JsZCkge1xyXG4gICAgICAgICAgICB2YXJpbmcgPSAnUG9zaXRpb25TcGFjZS5Xb3JsZCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGF0YS5tX1NwYWNlID09PSBQb3NpdGlvblNwYWNlLkFic29sdXRlV29ybGQpIHtcclxuICAgICAgICAgICAgdmFyaW5nID0gJ1Bvc2l0aW9uU3BhY2UuQWJzb2x1dGVXb3JsZCc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmRlcFZhcmluZ3MucHVzaCh2YXJpbmcpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNDb25jcmV0ZVByZWNpc2lvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5zbG90cy5mb3JFYWNoKHNsb3QgPT4ge1xyXG4gICAgICAgICAgICBzbG90Ll9jb25jcmV0ZVByZWNpc2lvbiA9IDM7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBnZW5lcmF0ZUNvZGUgKCkge1xyXG4gICAgICAgIGxldCBuYW1lID0gJ3ZfcG9zJztcclxuICAgICAgICBpZiAodGhpcy5kYXRhLm1fU3BhY2UgPT09IFBvc2l0aW9uU3BhY2UuT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSAndl9wb3MnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmRhdGEubV9TcGFjZSA9PT0gUG9zaXRpb25TcGFjZS5WaWV3KSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSAndl92aWV3UG9zJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5kYXRhLm1fU3BhY2UgPT09IFBvc2l0aW9uU3BhY2UuVGFuZ2VudCkge1xyXG4gICAgICAgICAgICAvLyBuYW1lID0gJ3ZfdGFuZ2VudFBvcyc7XHJcbiAgICAgICAgICAgIG5hbWUgPSAndl93b3JsZFBvcyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGF0YS5tX1NwYWNlID09PSBQb3NpdGlvblNwYWNlLldvcmxkKSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSAndl93b3JsZFBvcyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGF0YS5tX1NwYWNlID09PSBQb3NpdGlvblNwYWNlLkFic29sdXRlV29ybGQpIHtcclxuICAgICAgICAgICAgbmFtZSA9ICd2X3dvcmxkUG9zJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuZ2V0T3V0cHV0VmFyRGVmaW5lKDApfSA9ICR7bmFtZX07YDtcclxuICAgIH1cclxufVxyXG5cclxuIl19